import streamlit as st
import joblib
import numpy as np

# Load model and utilities
model = joblib.load("model/crop_model.pkl")
scaler = joblib.load("model/scaler.pkl")
label_encoder = joblib.load("model/label_encoder.pkl")

# Language dictionary
languages = {
    "English": {
        "title": "ЁЯМ╛ Crop Recommendation System",
        "submit": "Recommend Crop",
        "inputs": ["Nitrogen (N)", "Phosphorus (P)", "Potassium (K)", "Temperature (┬░C)", "Humidity (%)", "pH", "Rainfall (mm)"],
    },
    "рд╣рд┐рдВрджреА": {
        "title": "ЁЯМ╛ рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рдгрд╛рд▓реА",
        "submit": "рдлрд╕рд▓ рд╕реБрдЭрд╛рдПрдВ",
        "inputs": ["рдирд╛рдЗрдЯреНрд░реЛрдЬрди (N)", "рдлреЙрд╕реНрдлреЛрд░рд╕ (P)", "рдкреЛрдЯреИрд╢рд┐рдпрдо (K)", "рддрд╛рдкрдорд╛рди (┬░C)", "рдЖрд░реНрджреНрд░рддрд╛ (%)", "рдкреАрдПрдЪ", "рд╡рд░реНрд╖рд╛ (mm)"],
    },
    "ркЧрлБркЬрк░рк╛ркдрлА": {
        "title": "ЁЯМ╛ рккрк╛ркХ ркнрк▓рк╛ркоркг рк╕рк┐рк╕рлНркЯрко",
        "submit": "рккрк╛ркХ ркнрк▓рк╛ркоркг ркХрк░рлЛ",
        "inputs": ["ркирк╛ркИркЯрлНрк░рлЛркЬрки (N)", "рклрлЛрк╕рлНрклрк░рк╕ (P)", "рккрлЛркЯрлЗрк╢рк┐ркпрко (K)", "ркдрк╛рккркорк╛рки (┬░C)", "ркнрлЗркЬ (%)", "pH", "рк╡рк░рк╕рк╛ркж (mm)"],
    }
}

# Language selector
selected_lang = st.sidebar.selectbox("ЁЯМР Choose Language", list(languages.keys()))
text = languages[selected_lang]

st.title(text["title"])

# Vertical layout input fields
inputs = []
for label in text["inputs"]:
    value = st.number_input(label, step=0.1, format="%.2f")
    inputs.append(value)

# Predict button
if st.button(text["submit"]):
    input_scaled = scaler.transform([inputs])
    probs = model.predict_proba(input_scaled)[0]
    top3_idx = probs.argsort()[-3:][::-1]
    confidence = probs[top3_idx[0]]

    predicted_crop = label_encoder.inverse_transform([top3_idx[0]])[0]
    st.success(f"тЬЕ Recommended Crop: {predicted_crop.capitalize()}")

    # Show top 3 crop predictions
    st.markdown("### ЁЯФН Top 3 Crop Suggestions:")
    for idx in top3_idx:
        crop_name = label_encoder.inverse_transform([idx])[0]
        st.write(f"тЮбя╕П {crop_name.capitalize()}: {probs[idx]*100:.2f}%")
